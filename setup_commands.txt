# Installation Commands

# Frontend
npm install next react react-dom
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init

# Backend
pip install fastapi uvicorn sqlalchemy pydantic

# Docker
# Ensure Docker and Docker Compose are installed on your system.


# Installation Commands and Usage Instructions

## Docker Installation
# Ensure Docker and Docker Compose are installed on your system:
# Linux:
#   sudo apt update && sudo apt install docker.io docker-compose
# MacOS/Windows:
#   Download and install Docker Desktop from https://www.docker.com/

---

## Development Setup

### 1. Build the Docker Containers
# Run the following command to build the containers:
docker-compose build

### 2. Start the Containers
# Use the following command to start your development environment:
docker-compose up

# This will start:
# - Frontend (Next.js): http://localhost:3000
# - Backend (FastAPI): http://localhost:8000
# - Database (PostgreSQL): Accessible on port 5432 (localhost:5432).

### 3. Access Logs
# To view logs for each container, use:
docker-compose logs -f

### 4. Stop the Containers
# Use the following command to stop all running containers:
docker-compose down

---

## Production Setup with NGINX

### 1. Modify NGINX Configuration
# The `docker/nginx/nginx.conf` file already includes a basic setup for proxying:
# - `/` routes to the frontend container.
# - `/api/` routes to the backend container.

# Make adjustments to the file if needed (e.g., SSL certificates, custom headers).

### 2. Build the Production Images
# Make sure your frontend is built and optimized:
# Navigate to the frontend directory and run:
#   npm run build

# Update the Docker Compose file for production if needed, then build the images:
docker-compose build

### 3. Start the Production Environment
# Use the same command as development to start the containers:
docker-compose up -d

### 4. Verify the Application
# - Frontend: http://your-server-ip/
# - Backend: http://your-server-ip/api/

---

## Additional Commands

### Check Running Containers
docker ps

### Remove Unused Images/Containers
docker system prune -a

### Restart a Specific Service
docker-compose restart <service_name>
# Example: docker-compose restart backend

---

## Notes
- Ensure `.env` files are configured for sensitive credentials (e.g., database username/password).
- For production, use SSL certificates with NGINX for HTTPS support.
- If you encounter permission issues, ensure your user is added to the `docker` group.
